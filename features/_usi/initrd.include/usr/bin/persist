#!/bin/bash

set -Eeufo pipefail

if ! disk_dev=$(/usr/bin/detect_disk); then
	exit 1
fi

# clean up the disk
sgdisk -Z "$disk_dev"
sgdisk -o "$disk_dev"

case "$(uname -m)" in
	x86_64)
		uefi_arch=X64
		;;
	aarch64)
		uefi_arch=AA64
		;;
esac

# prepare bootloader
esp_dir="/sysroot/efi"
mkdir -p "$esp_dir/EFI/BOOT"
cp "/sysroot/usr/lib/systemd/boot/efi/systemd-boot$(tr '[:upper:]' '[:lower:]' <<< "$uefi_arch").efi" "$esp_dir/EFI/BOOT/BOOT$uefi_arch.EFI"

mkdir -p "$esp_dir/loader"
cat > "$esp_dir/loader/loader.conf" << EOF
timeout 0
reboot-on-error 1
EOF

[ -f /sysroot/opt/persist/hugepages.env ] && . /sysroot/opt/persist/hugepages.env
ENABLE_HUGEPAGE_SETUP="${ENABLE_HUGEPAGE_SETUP:-true}"

# configure hugepages
if [ "$ENABLE_HUGEPAGE_SETUP" = "true" ]; then
  default_non_hugepages_pm=45  # this translates to 4.5%
  non_hugepages_pm="${NON_HUGEPAGES_PM:-$default_non_hugepages_pm}"

  mem_total_mb=$(($(sed -rn 's/MemTotal:\s+(.*) kB/\1/p' /proc/meminfo) / 1024 ))
  hugepagesize_mb=$(($(sed -rn 's/Hugepagesize:\s+(.*) kB/\1/p' /proc/meminfo) / 1024 ))

  non_hugepages_mb=$(( ($mem_total_mb * $non_hugepages_pm) / 1000 ))
  hugepages=$(( ($mem_total_mb - $non_hugepages_mb ) / $hugepagesize_mb ))

  max_watermark_scale_factor=$(($non_hugepages_mb * 500 / $mem_total_mb))
  watermark_scale_factor=$(</proc/sys/vm/watermark_scale_factor)

  if [ $max_watermark_scale_factor -lt "$watermark_scale_factor" ]; then
    # keep it here for the initrd
    echo "vm.watermark_scale_factor = $max_watermark_scale_factor" > /sysroot/etc/sysctl.d/99-watermark-hugepages.conf
  fi

  echo "CMDLINE_LINUX=\"\$CMDLINE_LINUX hugepagesz=2MB hugepages=$hugepages\"" > /sysroot/etc/kernel/cmdline.d/99-hugepages.cfg
fi

mkdir -p "$esp_dir/EFI/Linux"

OS_RELEASE_FILE="/sysroot/etc/os-release"
if [ ! -f "$OS_RELEASE_FILE" ]; then
  echo "File not found '$OS_RELEASE_FILE', exiting"
  exit 1
fi

# source optional config file
[ -f /sysroot/opt/persist/gl-oci.conf ] && . /sysroot/opt/persist/gl-oci.conf
OCI_REPO="${OCI_REPO:-keppel.global.cloud.sap/ccloud-ghcr-io-mirror/gardenlinux/gardenlinux-ccloud}"
OCI_ARCH="${OCI_ARCH:-amd64}"

# source os-release file
. "$OS_RELEASE_FILE"

# oras needs a proper HOME variable
export HOME=/root

# setup OCI_TAG, UKI_SHA and fetch UKI
OCI_TAG="$GARDENLINUX_VERSION-$VARIANT_ID-$GARDENLINUX_COMMIT_ID-$OCI_ARCH"
OCI_TAG=${OCI_TAG//_/-} # replace underscores with dashes
UKI_SHA=$(oras manifest fetch "$OCI_REPO:${OCI_TAG}" | jq -r '.layers[] | select(.mediaType=="application/io.gardenlinux.uki") | .digest')
oras blob fetch "$OCI_REPO@$UKI_SHA" -o "$esp_dir/EFI/Linux/uki.efi"

if [ "$ENABLE_HUGEPAGE_SETUP" = "true" ]; then
  echo "hugepagesz=2MB hugepages=$hugepages" > /tmp/cmdlinef
  addon="/sysroot/usr/lib/systemd/boot/efi/addonx64.efi.stub"
  offs=$(objdump -h $addon | awk 'NF==7 {size=$3;offset=$4} END {print "16#"size" + 16#"offset}')
  if [[ $offs -eq 0 ]]; then
    echo "the offset can't be calculated for the stub addon"
    exit 1
  fi
  align=$(objdump -p $addon | grep Section | awk '{ print "16#"$2}')
  offs=$((offs + "$align" - offs % "$align"))
  mkdir -p /sysroot/efi/EFI/loader/addons
  objcopy --add-section .cmdline=/tmp/cmdlinef --change-section-vma .cmdline=$(printf 0x%x $offs) $addon /sysroot/efi/EFI/loader/addons/hugepages.addon.efi
fi

# Network config generation
if [[ -x /sysroot/opt/persist/network_up.sh ]]; then
	chroot /sysroot /opt/persist/network_up.sh
fi

# fstab should be blank
echo "# fstab should be blank" > /sysroot/etc/fstab

# generate the efi mount
cat << EOF >> /sysroot/etc/systemd/system/efi.mount
[Unit]
Before=local-fs.target
Requires=systemd-fsck@dev-disk-by\x2dlabel-ESP.service
After=systemd-fsck@dev-disk-by\x2dlabel-ESP.service
After=blockdev@dev-disk-by\x2dlabel-ESP.target

[Mount]
What=/dev/disk/by-label/ESP
Where=/efi
Type=vfat
Options=umask=0077

[Install]
WantedBy=local-fs.target
EOF

# TODO: support ignition provided configs as well
systemd-repart --root=/ --dry-run=no --tpm2-device=auto --tpm2-pcrs=7 "$disk_dev"
udevadm settle
umount /sysroot

# manage boot entries
# remove all HD related boot entries
for e in $(efibootmgr | awk '$NF ~ /^HD/ { print $1 }' | sed "s/Boot\([0-9A-F]*\)./\1/"); do
	echo "Removing entry $e"
	efibootmgr -B -b "$e" > /dev/null
done

efibootmgr -c -L "Gardenlinux" -l '\EFI\BOOT\BOOTX64.EFI' -d /dev/disk/by-label/ESP

# reboot
systemctl reboot -f
