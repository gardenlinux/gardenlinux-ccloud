name: setup
description: Set up Hypervisor and VM Environment for Integration Tests
runs:
  using: "composite"
  steps:
    - name: Configure the default libvirt network
      shell: bash
      run: |
        sudo virsh net-destroy default
        sudo virsh net-undefine default
        sudo virsh net-define ./.github/actions/test/integration/setup/virbr-hv.xml
        sudo virsh net-start default
        sudo virsh net-autostart default

    - name: Copy ignition file
      shell: bash
      run: |
        sudo cp "/opt/${TAG}.ign" /var/lib/libvirt/images/hv.ign

    - name: Create HyperVisor 1
      shell: bash
      run: |
        cp ./.github/actions/test/integration/setup/hv.xml ./.github/actions/test/integration/setup/hv1.xml
        sed -i "s|HV_NAME_GOES_HERE|HV1|g" ./.github/actions/test/integration/setup/hv1.xml
        sed -i "s|MAC_GOES_HERE|52:54:00:12:34:56|g" ./.github/actions/test/integration/setup/hv1.xml
        sudo cp "/opt/${TAG}.qcow2" /var/lib/libvirt/images/HV1.qcow2

        sudo virsh define ./.github/actions/test/integration/setup/hv1.xml
        sudo virsh start HV1

    - name: Create HyperVisor 2
      shell: bash
      run: |
        cp ./.github/actions/test/integration/setup/hv.xml ./.github/actions/test/integration/setup/hv2.xml
        sed -i "s|HV_NAME_GOES_HERE|HV2|g" ./.github/actions/test/integration/setup/hv2.xml
        sed -i "s|MAC_GOES_HERE|52:54:00:65:43:21|g" ./.github/actions/test/integration/setup/hv2.xml
        sudo cp "/opt/${TAG}.qcow2" /var/lib/libvirt/images/HV2.qcow2

        sudo virsh define ./.github/actions/test/integration/setup/hv2.xml
        sudo virsh start HV2

    - name: Configure SSH and libvirt on HyperVisors
      shell: bash
      run: |
        KEY=/opt/ssh_host_ed25519_key
        SSH_OPTS="-i $KEY -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"
        USER="root"
        MAX_ITER=30

        setup_hv() {
          local IP="$1"

          # Configure SSH between HyperVisors
          scp $SSH_OPTS /opt/ssh_host_ed25519_key "$USER@$IP:/opt/ssh_host_ed25519_key"
          ssh $SSH_OPTS "$USER@$IP" << EOF
            chmod 700 /root/.ssh
            echo "" > /root/.ssh/config
            echo "Host 192.168.122.*" >> /root/.ssh/config
            echo "    StrictHostKeyChecking no" >> /root/.ssh/config
            echo "    UserKnownHostsFile /dev/null" >> /root/.ssh/config
            echo "    IdentityFile /opt/ssh_host_ed25519_key" >> /root/.ssh/config
            echo "    IdentitiesOnly yes" >> /root/.ssh/config
            echo "    User root" >> /root/.ssh/config
            chmod 600 /root/.ssh/config
            chmod 600 /opt/ssh_host_ed25519_key
        EOF

          # Set up libvirt storage pool and network
          scp $SSH_OPTS ./.github/actions/test/integration/setup/virbr-vm.xml "$USER@$IP:/opt/virbr-vm.xml"
          ssh $SSH_OPTS "$USER@$IP" << EOF
            systemctl start libvirtd

            virsh pool-destroy default || true
            virsh pool-undefine default || true
            virsh pool-define-as default dir --target /var/lib/libvirt/images
            virsh pool-build default
            virsh pool-start default
            virsh pool-autostart default

            virsh net-destroy default || true
            virsh net-undefine default || true
            virsh net-define /opt/virbr-vm.xml
            virsh net-start default
            virsh net-autostart default
        EOF
        }

        wait_for_ssh() {
          local VM_NAME="$1"

          for ((i=1; i<=MAX_ITER; i++)); do
            local IP=$(sudo virsh domifaddr "$VM_NAME" | awk '/ipv4/ {print $4}' | cut -d'/' -f1)
            if [ -z "$IP" ]; then
              echo "No IP address found for $VM_NAME. Retrying..."
            elif ssh $SSH_OPTS "$USER@$IP" 'exit' 2>/dev/null; then
              echo "$VM_NAME is up at IP: $IP"
              setup_hv "$IP"
              break
            fi
            if (( i == MAX_ITER )); then
              echo "Timeout waiting for $VM_NAME to respond to SSH."
              sudo cat "/var/log/$VM_NAME.log"
              exit 1
            fi
            echo "Waiting for $VM_NAME to respond to SSH... ($i/$MAX_ITER)"
            sleep 10
          done
        }

        wait_for_ssh HV1
        wait_for_ssh HV2
