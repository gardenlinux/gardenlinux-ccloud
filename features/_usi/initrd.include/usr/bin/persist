#!/bin/bash

set -xeufo pipefail

if ! disk_dev=$(/usr/bin/detect_disk); then
	exit 1
fi

# clean up the disk
sgdisk -Z "$disk_dev"
sgdisk -o "$disk_dev"

case "$(uname -m)" in
	x86_64)
		uefi_arch=X64
		;;
	aarch64)
		uefi_arch=AA64
		;;
esac

# prepare bootloader
esp_dir="/sysroot/efi"
mkdir -p "$esp_dir/EFI/BOOT"
cp "/sysroot/usr/lib/systemd/boot/efi/systemd-boot$(tr '[:upper:]' '[:lower:]' <<< "$uefi_arch").efi" "$esp_dir/EFI/BOOT/BOOT$uefi_arch.EFI"

mkdir -p "$esp_dir/loader"
cat > "$esp_dir/loader/loader.conf" << EOF
timeout 0
reboot-on-error 1
EOF

# START OF HUGE PAGES SETUP
default_non_hugepages_pm=45  # this translates to 4.5%

mem_total_mb=$(($(sed -rn 's/MemTotal:\s+(.*) kB/\1/p' /proc/meminfo) / 1024 ))
hugepagesize_mb=$(($(sed -rn 's/Hugepagesize:\s+(.*) kB/\1/p' /proc/meminfo) / 1024 ))

non_hugepages_pm=$default_non_hugepages_pm
non_hugepages_mb=$(( ($mem_total_mb * $non_hugepages_pm) / 1000 ))
hugepages=$(( ($mem_total_mb - $non_hugepages_mb ) / $hugepagesize_mb ))

max_watermark_scale_factor=$(($non_hugepages_mb * 500 / $mem_total_mb))
watermark_scale_factor=$(</proc/sys/vm/watermark_scale_factor)

if [ $max_watermark_scale_factor -lt "$watermark_scale_factor" ]; then
  # keep it here for the initrd
  echo "vm.watermark_scale_factor = $max_watermark_scale_factor" > /sysroot/etc/sysctl.d/99-watermark-hugepages.conf
fi

echo "CMDLINE_LINUX=\"\$CMDLINE_LINUX hugepagesz=2MB hugepages=$hugepages\"" > /sysroot/etc/kernel/cmdline.d/99-hugepages.cfg

# update the kernel cmdline
# chroot /sysroot /usr/local/sbin/update-kernel-cmdline
# END OF HUGE PAGES SETUP

mkdir -p "$esp_dir/EFI/Linux"

# where do we get the uki from?
# using oras to download is also really hackish, temporary for CC
# should be provided via ignition
if ! [[ -f /sysroot/opt/persist/uki ]]; then
	echo "no uki resource provided, exiting"
	exit 1
fi
export HOME=/root
oras blob fetch $(< /sysroot/opt/persist/uki) -o /sysroot/efi/EFI/Linux/uki.efi

# update the kernel cmdline in the uki
# TODO: when using the USI tool to perform the in place update, should the cmdline of the new image also be changed?
# n.b. secureboot makes all this impossible!
cmdline=$(objcopy --dump-section .cmdline=/dev/stdout /sysroot/efi/EFI/Linux/uki.efi | sed -r 's/x{8,}//')
echo "$cmdline hugepagesz=2MB hugepages=$hugepages" > /tmp/cmdlinef
objcopy --update-section .cmdline=/tmp/cmdlinef /sysroot/efi/EFI/Linux/uki.efi

# Network config generation
if [[ -x /sysroot/opt/persist/network_up.sh ]]; then
	chroot /sysroot /opt/persist/network_up.sh
fi

# TODO: support ignition provided configs as well
systemd-repart --root=/ --dry-run=no --tpm2-device=auto --tpm2-pcrs=7 "$disk_dev"
udevadm settle
umount /sysroot

# manage boot entries
# remove all HD related boot entries
for e in $(efibootmgr | awk '$NF ~ /^HD/ { print $1 }' | sed "s/Boot\([0-9A-F]*\)./\1/"); do
	echo "Removing entry $e"
	efibootmgr -B -b "$e" > /dev/null
done

efibootmgr -c -L "Gardenlinux" -l '\EFI\BOOT\BOOTX64.EFI' -d /dev/disk/by-label/ESP

# reboot
systemctl reboot -f
